

conda.enabled = true

params {
  help = false
  // readPaths = "/biodata/franco/datasets/1000G_high_coverage/latest/*.vcf.gz"
  // outdir = "/biodata/franco/datasets/1000G_high_coverage/latest/processed"
  // filteredVcfs = "/biodata/franco/datasets/1000G_high_coverage/latest/processed/filtered_vcfs/1kGP_high_coverage_Illumina.chr*.filtered.SNV_INDEL_SV_phased_panel.biallelic.MAFfiltered.vcf.gz"
  // study_name = "1000G_high_coverage"
  // keepSamples = ""
  // maf = "0.001"

  // AnswerALS genotype data
  // readPaths = "/biodata/franco/datasets/answerALS/genomics/4_JointGenotyping/AnswerALS-866-G-v1-release5_joint-vcf-vqsr-annotated.chr*.vcf.gz"
  // keepSamples = "/biodata/franco/datasets/answerALS/genomics/4_JointGenotyping/samples_with_rnaseq.txt"
  // outdir = "/biodata/franco/datasets/answerALS/genomics/4_JointGenotyping/processed/"
  // filteredVcfs = "/biodata/franco/datasets/answerALS/genomics/4_JointGenotyping/processed/filtered_vcfs/AnswerALS-866-G-v1-release5_joint-vcf-vqsr-annotated.chr*.samples.biallelic.MAFfiltered.vcf.gz"

  // dbSNP database filtered_vcfs
  dbsnpfile = "/biodata/franco/datasets/dbSNP/GCF_000001405.40.chr_rename.gz"
  dbsnpfile_index = "/biodata/franco/datasets/dbSNP/GCF_000001405.40.chr_rename.gz.tbi"
}

executor {
    name = 'slurm'
    queueSize = 22
    submitRateLimit = 1
}

process {
  executor = 'slurm' //'local'
  queue = 'medium'
  // Capture exit codes from upstream processes when piping
  shell = ['/bin/bash', '-euo', 'pipefail']

  cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  time = { check_max( 24.h * task.attempt, 'time' ) }
}


profiles {
  conda {
    process.conda = '/usr/users/fsimonetti/miniconda3'
  }
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
